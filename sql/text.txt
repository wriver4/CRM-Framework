`id`, `name`, `phone`, `email`, `address`, `estimate_number`, `stage`, `proposal_sent_date`, `scheduled_date`, `structure_type`, `lead_source`, `lead_lost_notes`, `plans_submitted`, `structure_description`, `structure_other`, `site_visit_by`, `picture_submitted`, `referred_to`, `picture_upload_link`, `plans_upload_link`, `existing_client`, `get_updates`, `hear_about`, `hear_about_other`, `structure_additional`, `lead_notes`, `prospect_notes`, `lead_lost`, `site_visit_completed`, `closer`, `referred_services`, `assigned_to`, `referred`, `site_visit_date`, `date_qualified`, `contacted_date`, `referral_done`, `jd_referral_notes`, `closing_notes`, `prospect_lost`, `to_contracting`, `plans_and_pics`

Recommended Migration Strategy:

  1. Backup Approach (What you did - Good!)

  -- Your backup
  CREATE TABLE leads_revised AS SELECT * FROM leads;

  2. Better Migration Strategy

  Instead of altering the live table directly, here's a safer approach:

  -- Step 1: Create new table with correct structure
  CREATE TABLE leads_new LIKE leads_form_table; -- or use the CREATE statement from 
  leads_form_table.sql

  -- Step 2: Migrate data from old table to new table
  INSERT INTO leads_new (
      -- new structure fields
      lead_source, first_name, last_name, cell_phone, email, ctype, notes,
      -- ... all other new fields
      -- existing business fields
      family_name, fullname, existing_client, address, proposal_sent_date
      -- ... all existing fields
  )
  SELECT
      -- data transformation logic here
      CASE
          WHEN LOWER(lead_source) LIKE '%web%' THEN 1
          WHEN LOWER(lead_source) LIKE '%referral%' THEN 2
          ELSE 1
      END as lead_source,
      first_name,
      COALESCE(family_name, '') as last_name,
      -- ... continue mapping
  FROM leads_revised;

  -- Step 3: Rename tables (atomic operation)
  RENAME TABLE
      leads TO leads_old,
      leads_new TO leads;

  3. Even Safer: Use Transactions

  Create a migration script that combines both alter files:

  START TRANSACTION;

  -- Run alter_table.sql content here
  -- Run alter_data.sql content here

  -- If everything looks good:
  COMMIT;
  -- If something goes wrong:
  -- ROLLBACK;

  4. Best Practice Migration Script

  Would you like me to create a single comprehensive migration script that:
  - Creates the backup (done)
  - Does the migration safely
  - Includes rollback procedures
  - Validates the migration worked correctly

  This would be safer than running the two scripts separately in phpMyAdmin.
